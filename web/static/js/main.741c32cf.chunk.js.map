{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["getName","filename","name","toString","replace","date","Date","parseFloat","moment","format","Item","image","onClick","useInView","threshold","ref","inView","entry","className","style","cursor","width","height","minWidth","minHeight","src","logo","alt","caption","getImageObjects","files","d","index","push","App","props","useState","setFiles","showImage","setShowImage","currentImageIndex","setCurrentImageIndex","a","fetch","resp","ok","json","useEffect","fetchFiles","console","log","Container","map","value","onImageSelect","visible","onClose","images","activeIndex","onChange","dec","n","noNavbar","loop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0SAAe,MAA0B,iC,OCSzC,SAASA,EAAQC,GACb,IAAIC,EAAOD,EAASE,WAAWC,QAAQ,OAAQ,IAE3CC,EAAO,IAAIC,KAAwB,IAAnBC,WAAWL,IAG/B,OAAOM,IAAOH,GAAMI,OAAO,uBAG/B,SAASC,EAAT,GAAiC,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,QAElB,EAA6BC,YAAU,CAEnCC,UAAW,IAFRC,EAAP,EAAOA,IAAKC,EAAZ,EAAYA,OAAZ,EAAoBC,MAMpB,OACI,sBAAKF,IAAKA,EAAMG,UAAU,4BAA4BC,MAAO,CAACC,OAAQ,UAAWC,MAAO,QAASC,OAAQ,QAASC,SAAU,QAASC,UAAW,SAAUZ,QAASA,EAAnK,UACI,qBAAKa,IAAKT,EAASL,EAAMc,IAAMC,EAAMP,MAAO,CAACE,MAAO,QAASC,OAAQ,SAAUK,IAAG,OAAEhB,QAAF,IAAEA,OAAF,EAAEA,EAAOgB,MAC3F,qBAAKT,UAAU,cAAf,SAA8BP,EAAMiB,aAMhD,SAASC,EAAgBC,GACrB,IAAIC,EAAI,GACR,IAAK,IAAIC,KAASF,EACdC,EAAEE,KAAK,CACHR,IAAK,UAAYK,EAAME,GACvBJ,QAAS5B,EAAQ8B,EAAME,IACvBL,IAAK3B,EAAQ8B,EAAME,MAG3B,OAAOD,EA8CIG,MA3Cf,SAAaC,GAAQ,IAAD,EAEhB,EAA0BC,qBAA1B,mBAAON,EAAP,KAAcO,EAAd,KAEA,EAAkCD,oBAAS,GAA3C,mBAAOE,EAAP,KAAkBC,EAAlB,KACA,EAAkDH,mBAAS,GAA3D,mBAAOI,EAAP,KAA0BC,EAA1B,KALgB,4CAOhB,8BAAAC,EAAA,sEACqBC,MAAM,SAD3B,WACQC,EADR,QAEcC,GAFd,iEAKkBD,EAAKE,OALvB,OAKQf,EALR,OAMIM,EAASR,EAAgBE,IAN7B,4CAPgB,sBA0BhB,OAVAgB,qBAAU,YAhBM,mCAiBZC,GACAC,QAAQC,IAAI,eACb,CAACf,IAQA,eAACgB,EAAA,EAAD,CAAWjC,UAAU,cAArB,iBACKY,QADL,IACKA,GADL,UACKA,EAAOsB,WADZ,aACK,OAAAtB,GAAa,SAACuB,EAAOrB,GAAR,OAAkB,cAACtB,EAAD,CAAkBC,MAAO0C,EAAOzC,QAAS,kBAPjF,SAAuBoB,GACnBS,EAAqBT,GACrBO,GAAa,GAKsEe,CAActB,KAAlDA,MAC3C,cAAC,IAAD,CACIuB,QAASjB,EACTkB,QAAS,kBAAMjB,GAAa,IAC5BkB,OAAQ3B,EACR4B,YAAalB,EACbmB,SAAU,SAACC,EAAKC,GAAN,OAAYpB,EAAqBoB,IAC3CC,UAAQ,EACRC,MAAM,QCvEPC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.741c32cf.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport {Container} from \"react-bootstrap-v5\";\nimport {useEffect, useState} from \"react\";\nimport moment from 'moment';\nimport Viewer from 'react-viewer';\nimport {useInView} from \"react-intersection-observer\";\nimport logo from \"./logo.svg\";\n\nfunction getName(filename) {\n    let name = filename.toString().replace(\".mp4\", \"\")\n\n    let date = new Date(parseFloat(name) * 1000)\n\n\n    return moment(date).format(\"DD.MM.YYYY HH:mm:ss\")\n}\n\nfunction Item({image, onClick}) {\n\n    const {ref, inView, entry} = useInView({\n        /* Optional options */\n        threshold: 0,\n    });\n\n\n    return (\n        <div ref={ref}  className=\"d-inline-block m-2 border\" style={{cursor: 'pointer', width: '300px', height: '200px', minWidth: '300px', minHeight: '200px'}} onClick={onClick}>\n            <img src={inView ? image.src : logo} style={{width: '300px', height: '200px'}} alt={image?.alt}/>\n            <div className=\"text-center\">{image.caption}</div>\n        </div>\n    )\n\n}\n\nfunction getImageObjects(files) {\n    let d = []\n    for (let index in files) {\n        d.push({\n            src: '/media/' + files[index],\n            caption: getName(files[index]),\n            alt: getName(files[index]),\n        })\n    }\n    return d\n}\n\nfunction App(props) {\n\n    const [files, setFiles] = useState()\n\n    const [showImage, setShowImage] = useState(false);\n    const [currentImageIndex, setCurrentImageIndex] = useState(0);\n\n    async function fetchFiles() {\n        let resp = await fetch('/list')\n        if (!resp.ok) {\n            return\n        }\n        let d = await resp.json()\n        setFiles(getImageObjects(d))\n    }\n\n    useEffect(() => {\n        fetchFiles()\n        console.log('useEffect')\n    }, [props])\n\n    function onImageSelect(index) {\n        setCurrentImageIndex(index)\n        setShowImage(true)\n    }\n\n    return (\n        <Container className=\"text-center\">\n            {files?.map?.((value, index) => <Item key={index} image={value} onClick={() => onImageSelect(index)}/>)}\n            <Viewer\n                visible={showImage}\n                onClose={() => setShowImage(false)}\n                images={files}\n                activeIndex={currentImageIndex}\n                onChange={(dec, n) => setCurrentImageIndex(n)}\n                noNavbar\n                loop={false}\n            />\n\n        </Container>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}